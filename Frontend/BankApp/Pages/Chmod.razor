@page "/chmod"
@inherits LayoutComponentBase
@inject IJSRuntime JS

@if(role == "User"){
    <Unauthorized />
}
else{
    <div class="d-flex justify-content-center align-items-center" style="height: 100%; width: 100%;">
        <div class="col-lg-7 mb-5">
            <div class="card shadow-lg border-0 rounded-lg mt-5">
                <div class="card-header"><h3 class="text-center font-weight-light my-4">Change Role</h3></div>
                <div class="card-body">
                    <form>
                        <div class="form-floating mb-3">
                            <input class="form-control" id="inputMail" type="text" placeholder="user@banka.com" />
                            <label for="inputMail">User email</label>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <div class="form-floating mb-3 mb-md-0">
                                    <select class="form-select" id="inputRole" aria-label="Select new role">
                                        <option disabled>Choose new user role</option>
                                        <option value="User" selected>User</option>
                                        <option value="Banker">Banker</option>
                                        <option value="Admin">Admin</option>
                                    </select>
                                <label for="inputRole">New role</label>
                                </div>
                            </div>
                            <div class="col-md-6" id="student">
                                <div class="form-floating mb-3">
                                    <select class="form-select" id="inputStudent" aria-label="Is student">
                                        <option disabled>Is student</option>
                                        <option value="False" selected>False</option>
                                        <option value="True">True</option>
                                    </select>
                                    <label for="inputStudent">Student</label>
                                </div>
                            </div>
                        </div>
                        <div class="mt-4 mb-0">
                            <div class="d-flex justify-content-center">
                                <a class="btn btn-primary w-50 me-2" style="transition: 0.4s ease-in-out 0s;" onmouseover="this.style.transform='scale(1.03)'; this.style.backgroundColor='#0d6efd';" onmouseout="this.style.transform='scale(1)'; this.style.backgroundColor='#0d6efd';" onclick="Chmod()">Change role</a>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script>
        // If user is not selected, hide the student select
        const inputUserType = document.getElementById('inputRole');
        const inputStudent = document.getElementById('student');
        inputUserType.addEventListener('change', function() {
            if (inputUserType.value === 'User') {
                inputStudent.style.display = 'block';
            } else {
                inputStudent.style.display = 'none';
            }
        });
        async function Chmod() {
            // Get the email and role from the input fields
            var email = document.getElementById("inputMail").value;
            var role = document.getElementById("inputRole").value;
            var student = document.getElementById("inputStudent").value;


            // If User - 0, Banker - 1, Admin - 2
            let roleId = 0;
            if (role == "Banker") {
                roleId = 1;
            } else if (role == "Admin") {
                roleId = 2;
            }

            // Check if the email and role are not empty
            if (email && role){
                // Fetch /api/chmod endpoint with the email and role
                let data = await fetch('/api/chmod', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ Email: email, Role: roleId , Student: student === 'True' ? true : false})
                });
                    let response;
                    if (data.headers.get('Content-Type')?.includes('application/json')) {
                        response = await data.json();
                    } else {
                        response = await data.text();
                    }

                    if (data.ok) {
                        alert(response || 'User role changed successfully');
                    } else {
                        // Example response
                        // {
                        //     "type": "https://tools.ietf.org/html/rfc9110#section-15.5.1",
                        //     "title": "One or more validation errors occurred.",
                        //     "status": 400,
                        //     "errors": {
                        //         "Email": [
                        //             "Email is required"
                        //         ]
                        //     },
                        //     "traceId": "00-8b821b07be43c31645523da4400924ee-fc7aa8e5b69f365e-00"
                        // }

                        // Get error messages
                        let errors = response.errors;
                        let errorMessages = '';

                        // Loop through errors
                        for (const key in errors) {
                            errorMessages += `${errors[key][0]}\n`;
                        }

                        // Show error messages
                        alert(errorMessages);
                    }
            }
        }
    </script>
}
@code{
    private string? role;
    

    private async Task FetchRole()
    {
        role = await JS.InvokeAsync<string>("FetchLSKey", "role");
    }

    // On page load
    protected override async Task OnInitializedAsync()
    {
        await FetchRole();
        StateHasChanged();
    }
}